# 다이나믹 프로그래밍
# p.226 실전 문제 8-5 효율적인 화폐 구성 (지피띠니 ㅜㅜ)

n, m = map(int, input().split())

# 각 화폐 단위를 입력받아 배열에 저장
array = []
for i in range(n):
    array.append(int(input()))

# 결과를 저장할 리스트
# # d[i]는 i원을 만들기 위한 최소 화폐 개수
# 초기값은 매우 큰 수(=10001)로 설정
d = [10001] * (m + 1)

# 0원을 만들기 위해 필요한 화폐 개수는 0개
d[0] = 0

# 모든 화폐 단위에 대해 반복
for i in range(n):
    # 해당 화폐를 사용하여 만들 수 있는 금액부터 m까지 갱신
    for j in range(array[i], m + 1):
        # (j - 현재 화폐값)를 만들 수 있다면, 현재 금액 j도 만들 수 있음
        if d[j - array[i]] != 10001:
            # 최소값으로 갱신: 현재 값 vs (이전 금액 + 현재 화폐 1개)
            d[j] = min(d[j], d[j - array[i]] + 1)

# 최종적으로 m원을 만들 수 없는 경우
if d[m] == 10001:
    print(-1)
else:
    # m원을 만드는 데 필요한 최소 화폐 개수 출력
    print(d[m])